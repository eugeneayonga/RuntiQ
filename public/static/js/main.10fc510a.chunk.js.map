{"version":3,"sources":["Login.js","Signup.js","NavBar.js","AddRun.js","SearchBar.js","DeleteButton.js","EachRun.js","FindData.js","Home.js","UserHome.js","App.js","reportWebVitals.js","index.js"],"names":["Login","setUser","useState","username","setUsername","password","setPassword","onSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","ok","json","user","errors","console","log","type","name","value","placeholder","onChange","e","target","Signup","passwordConfirmation","setPasswordConfirmation","password_confirmation","NavBar","logout","className","onClick","to","AddRun","addRuns","date","distance","total_time","calories","average_heartrate","average_pace","fastest_split","newRun","setNewRun","handleChange","addNewRun","htmlFor","required","SearchBar","setSortBy","DeleteButton","handleDeleteRun","run","id","EachRun","handleFavoriteRun","moment","format","favorite","updatedRun","FindData","runs","sortBy","sortRuns","runList","map","Home","fastestMile","charAt","toUpperCase","slice","Infinity","UserHome","setRuns","useEffect","data","sorted","sort","run1","run2","Math","min","apply","path","updatedRuns","deletedRun","runToUpdate","filter","favoriteRun","App","setLoggedIn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10fc510a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Login({ setUser }) {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    fetch(\"/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ username, password }),\n    }).then((response) => {\n      if (response.ok) {\n        response.json().then((user) => {\n          setUser(user);\n        });\n      } else {\n        response.json().then((errors) => {\n          console.log(errors);\n        });\n      }\n    });\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <h3>Login</h3>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={username}\n          placeholder=\"Username\"\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        <br></br>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          placeholder=\"Password\"\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <br></br>\n        <button type=\"submit\">Log In</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\n\nfunction Signup({ setUser }) {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    fetch(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        password_confirmation: passwordConfirmation,\n      }),\n    }).then((response) => {\n      if (response.ok) {\n        response.json().then((user) => {\n          setUser(user);\n        });\n      } else {\n        response.json().then((errors) => {\n          console.log(errors);\n        });\n      }\n    });\n  }\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <h3>Sign Up</h3>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={username}\n          placeholder=\"Username\"\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        <br></br>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          placeholder=\"Password\"\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <br></br>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={passwordConfirmation}\n          placeholder=\"Password Confirmation\"\n          onChange={(e) => setPasswordConfirmation(e.target.value)}\n        />\n        <br></br>\n        <button type=\"submit\">Sign Up</button>\n      </form>\n    </div>\n  );\n}\nexport default Signup;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction NavBar({ logout }) {\n  function handleLogout() {\n    fetch(\"/logout\", {\n      method: \"DELETE\",\n    }).then(() => logout());\n  }\n  return (\n    <>\n      <div className=\"navbar\">\n        <button onClick={handleLogout}>Logout</button>\n\n        <NavLink to=\"/Home\">\n          <button className=\"button\">Home</button>\n        </NavLink>\n        <NavLink to=\"/AddRun\">\n          <button className=\"button\">Add A Run</button>\n        </NavLink>\n        <NavLink to=\"/FindData\">\n          <button className=\"button\">Find Data</button>\n        </NavLink>\n      </div>\n    </>\n  );\n}\nexport default NavBar;\n","import React, { useState } from \"react\";\n\nfunction AddRun({ addRuns }) {\n  const [newRun, setNewRun] = useState({\n    date: \"\",\n    distance: 0.0,\n    total_time: 0.0,\n    calories: 0,\n    average_heartrate: 0,\n    average_pace: 0.0,\n    fastest_split: 0.0,\n  });\n  const handleChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setNewRun({ ...newRun, [name]: value });\n  };\n  function handleSubmit(e) {\n    e.preventDefault();\n    const addNewRun = {\n      date: newRun.date,\n      distance: newRun.distance,\n      total_time: newRun.total_time,\n      calories: newRun.calories,\n      average_heartrate: newRun.average_heartrate,\n      average_pace: newRun.average_pace,\n      fastest_split: newRun.fastest_split,\n    };\n    fetch(\"/runs\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(addNewRun),\n    })\n      .then((response) => response.json())\n      .then(addRuns);\n    setNewRun({\n      date: \"\",\n      distance: 0.0,\n      total_time: 0.0,\n      calories: 0,\n      average_heartrate: 0,\n      average_pace: 0.0,\n      fastest_split: 0.0,\n    });\n  }\n  return (\n    <div className=\"runForm\">\n      <h1>Add your run data here:</h1>\n      <form onSubmit={handleSubmit} className=\"addRunForm\">\n        <p>\n          <label htmlFor=\"date\">Run date: </label>\n          <input\n            type=\"date\"\n            name=\"date\"\n            placeholder=\"date\"\n            value={newRun.date}\n            required\n            onChange={handleChange}\n          ></input>\n        </p>\n        <br />\n        <p>\n          <label htmlFor=\"distance\">Distance, enter format 0.00 : </label>\n          <input\n            type=\"float\"\n            name=\"distance\"\n            value={newRun.distance}\n            onChange={handleChange}\n          ></input>\n        </p>\n        <br />\n        <p>\n          <label htmlFor=\"time\">\n            Total run time, enter amount of minutes and seconds (ie. 80.05):{\" \"}\n          </label>\n          <input\n            type=\"float\"\n            name=\"total_time\"\n            value={newRun.total_time}\n            onChange={handleChange}\n          ></input>\n        </p>\n        <br />\n        <p>\n          <label htmlFor=\"calories\">Run calories burned: </label>\n          <input\n            type=\"number\"\n            placeholder=\"Calories\"\n            name=\"calories\"\n            value={newRun.calories}\n            onChange={handleChange}\n          ></input>\n        </p>\n        <br />\n        <p>\n          <label htmlFor=\"average_heartrate\">\n            Average heart rate, enter in whole numbers:{\" \"}\n          </label>\n          <input\n            type=\"number\"\n            placeholder=\"Average Heartrate\"\n            name=\"average_heartrate\"\n            value={newRun.average_heartrate}\n            onChange={handleChange}\n          ></input>\n        </p>\n        <br />\n        <p>\n          <label htmlFor=\"average_pace\">\n            Average pace, enter in format minutes.seconds:{\" \"}\n          </label>\n          <input\n            type=\"float\"\n            placeholder=\"Average Pace\"\n            name=\"average_pace\"\n            value={newRun.average_pace}\n            onChange={handleChange}\n          ></input>\n        </p>\n        <br />\n        <p>\n          <label htmlFor=\"fastest_split\">\n            Fastest split, enter in format minutes.seconds:{\" \"}\n          </label>\n          <input\n            type=\"float\"\n            placeholder=\"Fastest Split\"\n            name=\"fastest_split\"\n            value={newRun.fastest_split}\n            onChange={handleChange}\n          ></input>\n        </p>\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n      <h5>\n        To see a list of your run data click on the \"Find Data\" tab above.\n      </h5>\n    </div>\n  );\n}\nexport default AddRun;\n","import React from \"react\";\n\nfunction SearchBar({ setSortBy }) {\n  return (\n    <div>\n      <strong>Sort by:</strong>\n      <br></br>\n      <select onChange={(e) => setSortBy(e.target.value)}>\n        <option value=\"distance\">Distance</option>\n        <option value=\"fastest_split\">Fastest Split</option>\n        <option value=\"total_time\">Total Time</option>\n        <option value=\"average_pace\">Average Pace</option>\n      </select>\n      <br />\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from \"react\";\n\nfunction DeleteButton({ handleDeleteRun, run }) {\n  function deleteRun() {\n    fetch(`/runs/${run.id}`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    handleDeleteRun(run.id);\n  }\n  return (\n    <button className=\"deleteRunButton\" onClick={deleteRun}>\n      ✖{\" \"}\n    </button>\n  );\n}\nexport default DeleteButton;\n","import React from \"react\";\nimport DeleteButton from \"./DeleteButton\";\nimport moment from \"moment\";\n\nfunction EachRun({ run, handleDeleteRun, handleFavoriteRun }) {\n  function favoriteRun() {\n    fetch(`/runs/${run.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ favorite: !run.favorite }),\n    })\n      .then((response) => response.json())\n      .then((updatedRun) => handleFavoriteRun(updatedRun));\n  }\n\n  return (\n    <tbody>\n      <tr>\n        <th>Date</th>\n        <th>Average Pace</th>\n        <th>Calories burned</th>\n        <th>Total distance</th>\n        <th>Fastest split</th>\n        <th>total time</th>\n        <th>Average heart rate</th>\n        <th>Favorite</th>\n        <th>Delete Run</th>\n      </tr>\n      <tr>\n        <td>{moment(run.date).format(\"MM/DD/YYYY\")}</td>\n        <td>{run.average_pace}</td>\n        <td>{run.calories}</td>\n        <td>{run.distance}</td>\n        <td>{run.fastest_split}</td>\n        <td>{run.total_time}</td>\n        <td>{run.average_heartrate}</td>\n        <td onClick={favoriteRun}>{run.favorite ? `⭐` : \"☆ \"}</td>\n        <DeleteButton handleDeleteRun={handleDeleteRun} run={run} />\n      </tr>\n    </tbody>\n  );\n}\nexport default EachRun;\n","import React from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport EachRun from \"./EachRun\";\n\nfunction FindData({\n  runs,\n  sortRuns,\n  sortBy,\n  setSortBy,\n  handleDeleteRun,\n  handleFavoriteRun,\n}) {\n  const runList = runs.map((run) => (\n    <EachRun\n      key={run.id}\n      run={run}\n      handleDeleteRun={handleDeleteRun}\n      handleFavoriteRun={handleFavoriteRun}\n    />\n  ));\n  return (\n    <div>\n      <SearchBar sortBy={sortBy} setSortBy={setSortBy} />\n      <h1>Run Data</h1>\n      <p>\n        All data types are sorted by the lowest number first, including distance\n        and total time.\n      </p>\n      <table>{runList}</table>\n    </div>\n  );\n}\nexport default FindData;\n","import React from \"react\";\n\nfunction Home({ user, fastestMile }) {\n  return (\n    <div className=\"homePage\">\n      <h1>\n        Hello {user.username.charAt(0).toUpperCase() + user.username.slice(1)}!\n      </h1>\n      {fastestMile === Infinity ? (\n        <h4>Enter run data to find your fastest mile.</h4>\n      ) : (\n        <h4>Your fastest mile so far: {fastestMile} minutes.</h4>\n      )}\n      <div>\n        <p>\n          Welcome to the run-data-tracker app. You can enter the data you would\n          like to keep track of, then sort based on what you would like to find.\n        </p>\n      </div>\n    </div>\n  );\n}\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport NavBar from \"./NavBar\";\nimport AddRun from \"./AddRun\";\nimport FindData from \"./FindData\";\nimport Home from \"./Home\";\nimport { Route } from \"react-router-dom\";\nfunction UserHome({ user, logout }) {\n  const [runs, setRuns] = useState([]);\n  const [sortBy, setSortBy] = useState(\"fastest_split\");\n\n  useEffect(() => {\n    fetch(\"/runs\")\n      .then((response) => response.json())\n      .then((data) => {\n        setRuns(data);\n      });\n  }, []);\n  useEffect(() => {\n    const sorted = [...runs].sort((run1, run2) => {\n      if (run1[sortBy] > run2[sortBy]) {\n        return 1;\n      } else if (run1[sortBy] < run2[sortBy]) {\n        return -1;\n      }\n      return 0;\n    });\n\n    setRuns(sorted);\n  }, [sortBy]);\n  function addRuns(newRun) {\n    const updatedRuns = [...runs, newRun];\n    setRuns(updatedRuns);\n  }\n  const fastestMile = Math.min.apply(\n    Math,\n\n    runs?.map((run) => {\n      return run.fastest_split;\n    })\n  );\n  function handleDeleteRun(deletedRun) {\n    const runToUpdate = runs.filter((run) => {\n      return run.id !== deletedRun;\n    });\n    setRuns(runToUpdate);\n  }\n  function handleFavoriteRun(favoriteRun) {\n    const runToUpdate = runs.map((run) => {\n      if (run.id === favoriteRun.id) {\n        return favoriteRun;\n      } else {\n        return run;\n      }\n    });\n    setRuns(runToUpdate);\n  }\n\n  return (\n    <div>\n      <NavBar logout={logout} />\n      <Route path=\"/Home\">\n        <Home user={user} runs={runs} fastestMile={fastestMile} />\n      </Route>\n      <Route path=\"/AddRun\">\n        <AddRun addRuns={addRuns} />\n      </Route>\n      <Route path=\"/FindData\">\n        <FindData\n          runs={runs}\n          sortBy={sortBy}\n          setSortBy={setSortBy}\n          handleDeleteRun={handleDeleteRun}\n          handleFavoriteRun={handleFavoriteRun}\n        />\n      </Route>\n    </div>\n  );\n}\nexport default UserHome;\n","import React, { useState, useEffect } from \"react\";\nimport Login from \"./Login\";\nimport Signup from \"./Signup\";\nimport UserHome from \"./UserHome\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  useEffect(() => {\n    fetch(\"/me\").then((response) => {\n      if (response.ok) {\n        response.json().then((data) => setUser(data));\n        setLoggedIn(true);\n      }\n    });\n  }, []);\n  const logout = () => {\n    setUser(null);\n    setLoggedIn(false);\n  };\n\n  return (\n    <div>\n      {user ? (\n        <UserHome user={user} logout={logout} />\n      ) : (\n        <div>\n          <h1>Run Data Tracker</h1>\n          <h4>\n            Welcome! You can use this app to track your run progress. Enter data\n            for each workout you do, then find your results!\n          </h4>\n          <Login setUser={setUser} />\n          <Signup setUser={setUser} />\n        </div>\n      )}\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}